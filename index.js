const TelegramBot = require('node-telegram-bot-api'); 
const bot = new TelegramBot('7563077731:AAFNB3ZIC31wF6gWc48a6bFQJInrF2klocA', { polling: true }); 
let tournaments = {};
let pendingResults = {};

const commandsKeyboard = {
    reply_markup: {
        keyboard: [
            ['/newTournament'],
            ['/completedTournaments']
        ],
        resize_keyboard: true,
        one_time_keyboard: true
    }
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const welcomeText = `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n` +
                       `/newTournament - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä\n` +
                       `/completedTournaments - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã`;
    bot.sendMessage(chatId, welcomeText, commandsKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /completedTournaments
bot.onText(/\/completedTournaments/, (msg) => {
    const chatId = msg.chat.id;
    const today = new Date().toISOString().split('T')[0];

    const completed = Object.entries(tournaments)
        .filter(([_, t]) => t.endDate < today && !t.result)
        .map(([name, _], index) => ({ id: index + 1, name }));
    
    if (completed.length === 0) {
        return bot.sendMessage(chatId, '–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.');
    }
    
    let response = '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã (—É–∫–∞–∂–∏—Ç–µ ID –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞):\n\n';
    completed.forEach(t => {
        response += `üÜî ${t.id}. ${t.name}\n`;
    });

    bot.sendMessage(chatId, response).then(() => {
        bot.once('message', (msg) => {
            const selectedId = parseInt(msg.text);
            const tournament = completed.find(t => t.id === selectedId);
            
            if (!tournament) {
                return bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞!');
            }

            pendingResults[chatId] = tournament.name;
            bot.sendMessage(chatId, `–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è "${tournament.name}" (true/false):`, {
                reply_markup: {
                    keyboard: [['true', 'false']],
                    resize_keyboard: true,
                    one_time_keyboard: true
                }
            });
        });
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ true/false
bot.onText(/^(true|false)$/, (msg, match) => {
    const chatId = msg.chat.id;
    const result = match[0] === 'true';
    const tournamentName = pendingResults[chatId];
    
    if (tournamentName) {
        tournaments[tournamentName].result = result;
        delete pendingResults[chatId];
        bot.sendMessage(chatId, `‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç "${result}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ "${tournamentName}"!`);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /newTournament
bot.onText(/\/newTournament/, (msg) => {
    const chatId = msg.chat.id;

    bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞').then(() => {
        bot.once('message', (msg) => {
            const tournamentsName = msg.text;
            
            if (!tournamentsName) {
                return bot.sendMessage(chatId, '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
            }

            bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ').then(() => {
                bot.once('photo', (msg) => {
                    const photoId = msg.photo[msg.photo.length - 1].file_id;

                    bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î)').then(() => {
                        bot.once('message', (msg) => {
                            const msg_date = msg.text.trim();
                            const datePattern = /^\d{4}-\d{2}-\d{2}$/;
                            
                            if (!datePattern.test(msg_date)) {
                                return bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î');
                            }

                            tournaments[tournamentsName] = { photo: photoId, endDate: msg_date };
                            bot.sendMessage(chatId, '–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
                        });
                    });
                });
            });
        });
    });
});